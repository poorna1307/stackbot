Sure, we can replace the Node.js backend with a Flask backend. Here’s how you can do it:

### 1. Set Up the Flask Application

First, create a new Flask project and set up Socket.io with Flask.

#### Install Dependencies

Create a virtual environment and install necessary packages:

```sh
python -m venv venv
source venv/bin/activate
pip install flask flask-socketio
```

#### Create the Flask Server

Create a file named `server.py`:

```python
from flask import Flask, request, jsonify
from flask_socketio import SocketIO, join_room, leave_room, send, emit

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

users = {}

@app.route('/login', methods=['POST'])
def login():
    user = request.json
    users[user['userId']] = user['userType']
    return jsonify({"message": "User logged in successfully"}), 200

@socketio.on('join')
def on_join(data):
    user_id = data['userId']
    room = user_id
    join_room(room)
    users[user_id] = request.sid
    print(f"{user_id} joined with session ID {request.sid}")

@socketio.on('private_message')
def handle_private_message(data):
    recipient_sid = users.get(data['to'])
    if recipient_sid:
        emit('private_message', data, room=recipient_sid)

@socketio.on('disconnect')
def on_disconnect():
    user_id = None
    for uid, sid in users.items():
        if sid == request.sid:
            user_id = uid
            break
    if user_id:
        del users[user_id]
    print(f"{user_id} disconnected")

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)
```

### 2. Modify the React Application

Update the React application to interact with the Flask backend.

#### Install Dependencies

```sh
npm install axios
```

#### Update `Login.js` and `Chat.js`

`Login.js`:

```jsx
import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import axios from 'axios';

const Login = ({ setUser }) => {
  const [userId, setUserId] = useState('');
  const [userType, setUserType] = useState('mentee');
  const history = useHistory();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const user = { userId, userType };
    await axios.post('http://localhost:5000/login', user);
    setUser(user);
    history.push('/chat');
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="User ID" value={userId} onChange={(e) => setUserId(e.target.value)} required />
      <select value={userType} onChange={(e) => setUserType(e.target.value)}>
        <option value="mentee">Mentee</option>
        <option value="mentor">Mentor</option>
      </select>
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
```

`Chat.js`:

```jsx
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';

const socket = io('http://localhost:5000');

const Chat = ({ user }) => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [selectedMentor, setSelectedMentor] = useState(null);

  useEffect(() => {
    if (user) {
      socket.emit('join', user);
    }

    socket.on('private_message', (data) => {
      setMessages((prevMessages) => [...prevMessages, data]);
    });

    return () => {
      socket.off('private_message');
    };
  }, [user]);

  const sendMessage = () => {
    const data = {
      from: user.userId,
      to: selectedMentor,
      message,
    };
    socket.emit('private_message', data);
    setMessages((prevMessages) => [...prevMessages, data]);
    setMessage('');
  };

  return (
    <div>
      <h2>Chat</h2>
      {user.userType === 'mentee' && (
        <div>
          <h3>Select a Mentor</h3>
          <button onClick={() => setSelectedMentor('mentor1')}>Mentor 1</button>
          <button onClick={() => setSelectedMentor('mentor2')}>Mentor 2</button>
        </div>
      )}
      {selectedMentor && (
        <div>
          <div>
            {messages.map((msg, index) => (
              <div key={index}>
                <strong>{msg.from}: </strong>{msg.message}
              </div>
            ))}
          </div>
          <input type="text" value={message} onChange={(e) => setMessage(e.target.value)} />
          <button onClick={sendMessage}>Send</button>
        </div>
      )}
    </div>
  );
};

export default Chat;
```

### 3. Run the Application

Start the Flask server:

```sh
python server.py
```

Start the React application:

```sh
npm start
```

Navigate to `http://localhost:3000` to see the login page. After logging in as a mentee, select a mentor to start chatting. If you log in as a mentor, you can receive and send messages from the mentees.

This setup provides a simple one-on-one chat application with React and Flask using Socket.io. For a production-ready application, consider adding more robust user authentication, chat history, and UI enhancements.
